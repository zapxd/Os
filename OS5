#include <stdio.h>  // Standard input/output header file

int required[100], allocate[100], need[100];  // Arrays for required, allocated, and needed resources

void main() {
    int n;  // Number of processes
    int max = 12, allocateCount = 0;  // Maximum allocation count and a running count of allocated resources

    printf("Enter the number of processes:\n");
    scanf("%d", &n);

    // Input for required resources for each process
    printf("Enter the required resource for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Requirement for Process %d: ", i + 1);
        scanf("%d", &required[i]);
    }

    // Input for allocated resources for each process
    printf("Enter the allocated resource for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Allocated for Process %d: ", i + 1);
        scanf("%d", &allocate[i]);
        allocateCount += allocate[i];  // Running total of allocated resources
        need[i] = required[i] - allocate[i];  // Calculate the need (required - allocated)
    }

    // Available resources
    int available = max - allocateCount;  // Calculate available resources after allocation

    int count = 0, sequence = 0;  // Variables to track processes left and executed
    int ans[n], ind = 0;  // Array to store the safe sequence, and index counter

    // Array to keep track of finished processes
    int finished[n];
    for (int i = 0; i < n; i++) {
        finished[i] = 0;  // Initialize all processes as not finished
    }

    while (count < n) {
        int found = 0;
        for (int j = 0; j < n; j++) {
            if (finished[j] == 0 && need[j] <= available) {  // Process can execute if it hasn't finished and its need <= available
                ans[ind++] = j + 1;  // Add process to the safe sequence
                sequence++;  // Increment sequence
                count++;  // Process has safely executed
                available += allocate[j];  // Update available resources
                finished[j] = 1;  // Mark process as finished
                found = 1;  // A process was found and executed
            }
        }
        if (!found)  // If no process was found, system is in an unsafe state
            break;
    }

    // Check if the system is in a safe or unsafe state
    if (sequence < n) {
        printf("\nThe system is in an unsafe state!!\n");
    } else {
        printf("\nThe system is in a safe state!!\n");
        printf("Safe sequence is: ");
        for (int i = 0; i < n; i++) {
            printf("P%d", ans[i]);
            if (i < n - 1) {
                printf(" -> ");  // Print arrow between processes
            }
        }
        printf("\n");
    }
}
