#include<stdio.h>
#include<stdlib.h>

int Bellman(int G[20][20], int V, int E, int edge[20][2]) {
    int i, u, v, k, distance[20], parent[20], s, flag = 1;

    // Initialization
    for (i = 0; i < V; i++) {
        distance[i] = 10000; // Set initial distances to infinity (or a large number)
        parent[i] = -1;
    }
    
    printf("Enter source\n");
    scanf("%d", &s);
    distance[s - 1] = 0;

    // Relaxation steps
    for (k = 0; k < V - 1; k++) {
        for (k = 0; k < E; k++) {
            u = edge[k][0];
            v = edge[k][1];
            if (distance[u] + G[u][v] < distance[v]) {
                distance[v] = distance[u] + G[u][v];
                parent[v] = u;
            }
        }
    }

    // Check for negative-weight cycles
    for (k = 0; k < E; k++) {
        u = edge[k][0];
        v = edge[k][1];
        if (distance[u] + G[u][v] < distance[v]) {
            flag = 0; // Negative-weight cycle detected
        }
    }

    if (flag) {
        for (i = 0; i < V; i++) {
            printf("Vertex %d -> cost = %d, parent = %d\n", i + 1, distance[i], parent[i] + 1);
        }
    }

    return flag;
}

int main() {
    int v, edge[20][2], G[20][20], i, j, k = 0;
    
    printf("BELLMAN FORD\n");
    printf("Enter no. of vertices\n");
    scanf("%d", &v);

    printf("Enter graph in matrix form:\n");
    for (i = 0; i < v; i++) {
        for (j = 0; j < v; j++) {
            scanf("%d", &G[i][j]);
            if (G[i][j] != 0) {
                edge[k][0] = i;
                edge[k++][1] = j;
            }
        }
    }

    if (Bellman(G, v, k, edge)) {
        printf("\nNo negative weight cycle\n");
    } else {
        printf("\nNegative weight cycle exists\n");
    }

    return 0;
}
